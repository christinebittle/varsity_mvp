<?xml version="1.0"?>
<doc>
    <assembly>
        <name>varsity_w_auth</name>
    </assembly>
    <members>
        <member name="M:varsity_w_auth.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:varsity_w_auth.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:varsity_w_auth.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,varsity_w_auth.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,varsity_w_auth.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:varsity_w_auth.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},varsity_w_auth.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.#ctor(varsity_w_auth.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,varsity_w_auth.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:varsity_w_auth.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:varsity_w_auth.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:varsity_w_auth.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:varsity_w_auth.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:varsity_w_auth.Controllers.ManageController.GetApplicationCookie">
            <summary>
            Grabs the authentication credentials which are sent to the Controller.
            This is NOT considered a proper authentication technique for the WebAPI. It piggybacks the existing authentication set up in the template for Individual User Accounts. Considering the existing scope and complexity of the course, it works for now.
            
            Here is a descriptive article which walks through the process of setting up authorization/authentication directly.
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerController.#cctor">
            <summary>
            This allows us to access a pre-defined C# HttpClient 'client' variable for sending POST and GET requests to the data access layer.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerController.GetApplicationCookie">
            <summary>
            Grabs the authentication credentials which are sent to the Controller.
            This is NOT considered a proper authentication technique for the WebAPI. It piggybacks the existing authentication set up in the template for Individual User Accounts. Considering the existing scope and complexity of the course, it works for now.
            
            Here is a descriptive article which walks through the process of setting up authorization/authentication directly.
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.GetPlayers">
            <summary>
            Gets a list or players in the database alongside a status code (200 OK).
            </summary>
            <returns>A list of players including their ID, bio, first name, last name, and teamid.</returns>
            <example>
            GET : api/playerdata/getplayers
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.GetPlayersPage(System.Int32,System.Int32)">
            <summary>
            Gets a list or players in the database alongside a status code (200 OK). Skips the first {startindex} records and takes {perpage} records.
            </summary>
            <returns>A list of players including their ID, bio, first name, last name, and teamid.</returns>
            <param name="StartIndex">The number of records to skip through</param>
            <param name="PerPage">The number of records for each page</param>
            <example>
            GET: api/PlayerData/GetPlayersPage/20/5
            Retrieves the first 5 players after skipping 20 (fifth page)
            
            GET: api/PlayerData/GetPlayersPage/15/3
            Retrieves the first 3 players after skipping 15 (sixth page)
            
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.FindPlayer(System.Int32)">
            <summary>
            Finds a particular player in the database with a 200 status code. If the player is not found, return 404.
            </summary>
            <param name="id">The player id</param>
            <returns>Information about the player, including player id, bio, first and last name, and teamid</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.FindTeamForPlayer(System.Int32)">
            <summary>
            Finds a particular Team in the database given a player id with a 200 status code. If the Team is not found, return 404.
            </summary>
            <param name="id">The player id</param>
            <returns>Information about the Team, including Team id, bio, first and last name, and teamid</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.UpdatePlayer(System.Int32,varsity_w_auth.Models.Player)">
            <summary>
            Updates a player in the database given information about the player.
            </summary>
            <param name="id">The player id</param>
            <param name="player">A player object. Received as POST data.</param>
            <returns></returns>
            <example>
            POST: api/PlayerData/UpdatePlayer/5
            FORM DATA: Player JSON Object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.UpdatePlayerPic(System.Int32)">
            <summary>
            Receives player picture data, uploads it to the webserver and updates the player's HasPic option
            </summary>
            <param name="id">the player id</param>
            <returns>status code 200 if successful.</returns>
            <example>
            curl -F playerpic=@file.jpg "https://localhost:xx/api/playerdata/updateplayerpic/2"
            POST: api/PlayerData/UpdatePlayerPic/3
            HEADER: enctype=multipart/form-data
            FORM-DATA: image
            </example>
            https://stackoverflow.com/questions/28369529/how-to-set-up-a-web-api-controller-for-multipart-form-data
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.AddPlayer(varsity_w_auth.Models.Player)">
            <summary>
            Adds a player to the database.
            </summary>
            <param name="player">A player object. Sent as POST form data.</param>
            <returns>status code 200 if successful. 400 if unsuccessful</returns>
            <example>
            POST: api/PlayerData/AddPlayer
             FORM DATA: Player JSON Object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.DeletePlayer(System.Int32)">
            <summary>
            Deletes a player in the database
            </summary>
            <param name="id">The id of the player to delete.</param>
            <returns>200 if successful. 404 if not successful.</returns>
            <example>
            POST: api/PlayerData/DeletePlayer/5
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.PlayerDataController.PlayerExists(System.Int32)">
            <summary>
            Finds a player in the system. Internal use only.
            </summary>
            <param name="id">The player id</param>
            <returns>TRUE if the player exists, false otherwise.</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorController.#cctor">
            <summary>
            This allows us to access a pre-defined C# HttpClient 'client' variable for sending POST and GET requests to the data access layer.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorController.GetApplicationCookie">
            <summary>
            Grabs the authentication credentials which are sent to the Controller.
            This is NOT considered a proper authentication technique for the WebAPI. It piggybacks the existing authentication set up in the template for Individual User Accounts. Considering the existing scope and complexity of the course, it works for now.
            
            Here is a descriptive article which walks through the process of setting up authorization/authentication directly.
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorController.Unsponsor(System.Int32,System.Int32)">
            <summary>
            This method collects the required information to remove an association between a team and a sponsor.
            </summary>
            <param name="teamid">The team to be unassociated with the sponsor</param>
            <param name="sponsorid">The sponsor to be unassociated with the team</param>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorController.Sponsor(System.Int32,System.Int32)">
            <summary>
            This method collects the required information to add an association between a team and a sponsor.
            </summary>
            <param name="teamid">The team to be sponsored</param>
            <param name="sponsorid">The sponsor to sponsor the team.</param>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.GetSponsors">
            <summary>
            Gets a list or Sponsors in the database alongside a status code (200 OK).
            </summary>
            <returns>A list of Sponsors including their ID, name, and URL.</returns>
            <example>
            GET: api/SponsorData/GetSponsors
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.GetTeamsForSponsor(System.Int32)">
            <summary>
            Gets a list or Teams in the database associated with a particular sponsor. Returns a status code (200 OK)
            </summary>
            <param name="id">The input sponsor id</param>
            <returns>A list of Teams including their ID, name, and URL.</returns>
            <example>
            GET: api/TeamData/GetTeamsForSponsor
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.GetTeamsNotSponsored(System.Int32)">
            <summary>
            Gets a list or Teams in the database NOT associated with a sponsor. These could be potentially sponsored teams.
            </summary>
            <param name="id">The input sponsor id</param>
            <returns>A list of Teams including their ID, name, and URL.</returns>
            <example>
            GET: api/TeamData/GetTeamsForSponsor
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.FindSponsor(System.Int32)">
            <summary>
            Finds a particular Sponsor in the database with a 200 status code. If the Sponsor is not found, return 404.
            </summary>
            <param name="id">The Sponsor id</param>
            <returns>Information about the Sponsor, including Sponsor id, bio, first and last name, and teamid</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.UpdateSponsor(System.Int32,varsity_w_auth.Models.Sponsor)">
            <summary>
            Updates a Sponsor in the database given information about the Sponsor.
            </summary>
            <param name="id">The Sponsor id</param>
            <param name="Sponsor">A Sponsor object. Received as POST data.</param>
            <returns></returns>
            <example>
            POST: api/SponsorData/UpdateSponsor/5
            FORM DATA: Sponsor JSON Object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.AddSponsor(varsity_w_auth.Models.Sponsor)">
            <summary>
            Adds a Sponsor to the database.
            </summary>
            <param name="Sponsor">A Sponsor object. Sent as POST form data.</param>
            <returns>status code 200 if successful. 400 if unsuccessful</returns>
            <example>
            POST: api/Sponsors/AddSponsor
             FORM DATA: Sponsor JSON Object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.DeleteSponsor(System.Int32)">
            <summary>
            Deletes a Sponsor in the database
            </summary>
            <param name="id">The id of the Sponsor to delete.</param>
            <returns>200 if successful. 404 if not successful.</returns>
            <example>
            POST: api/Sponsors/DeleteSponsor/5
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.Unsponsor(System.Int32,System.Int32)">
            <summary>
            Deletes a relationship between a particular team and a sponsor
            </summary>
            <param name="teamid">The team id</param>
            <param name="sponsorid">The Sponsor id</param>
            <returns>status code of 200 OK</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.Sponsor(System.Int32,System.Int32)">
            <summary>
            Adds a relationship between a particular team and a sponsor
            </summary>
            <param name="teamid">The team id</param>
            <param name="sponsorid">The Sponsor id</param>
            <returns>status code of 200 OK</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SponsorDataController.SponsorExists(System.Int32)">
            <summary>
            Finds a Sponsor in the system. Internal use only.
            </summary>
            <param name="id">The Sponsor id</param>
            <returns>TRUE if the Sponsor exists, false otherwise.</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportController.#cctor">
            <summary>
            This allows us to access a pre-defined C# HttpClient 'client' variable for sending POST and GET requests to the data access layer.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportController.GetApplicationCookie">
            <summary>
            Grabs the authentication credentials which are sent to the Controller.
            This is NOT considered a proper authentication technique for the WebAPI. It piggybacks the existing authentication set up in the template for Individual User Accounts. Considering the existing scope and complexity of the course, it works for now.
            
            Here is a descriptive article which walks through the process of setting up authorization/authentication directly.
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportDataController.GetSports">
            <summary>
            Returns all sports in our system
            </summary>
            <returns>A status code of 200 along with a list of sports in the database.</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportDataController.GetTeamsforSport(System.Int32)">
            <summary>
            returns a list of teams associated with this sport.
            </summary>
            <param name="id">The input Sport ID</param>
            <returns>All teams associated with this sport</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportDataController.FindSport(System.Int32)">
            <summary>
            Finds a particular sport in the database with its ID
            </summary>
            <param name="id">The sport id primary key</param>
            <returns>the associated sport in the database with a 200 status code. 404 if that sport is not found.</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportDataController.UpdateSport(System.Int32,varsity_w_auth.Models.Sport)">
            <summary>
            Updates a sport in the database.
            </summary>
            <param name="id">The primary key of the sport to update</param>
            <param name="Sport">POST data for information about the sport.</param>
            <returns>Returns status code of 200 if successful.</returns>
            <example>
            POST api/sportdata/updatesport
            FORM DATA: sport json object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportDataController.AddSport(varsity_w_auth.Models.Sport)">
            <summary>
            Adds a Sport to the database.
            </summary>
            <param name="Sport">A Sport object. Sent as POST form data.</param>
            <returns>status code 200 if successful. 400 if unsuccessful</returns>
            <example>
            POST: api/SportData/AddSport
             FORM DATA: Sport JSON Object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SportDataController.DeleteSport(System.Int32)">
            <summary>
            Deletes a Sport in the database
            </summary>
            <param name="id">The id of the Sport to delete.</param>
            <returns>200 if successful. 404 if not successful.</returns>
            <example>
            POST: api/SportData/DeleteSport/5
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SupportDataController.GetSupportsForTeam(System.Int32)">
            <summary>
            Returns a list of Support Messages for a given team.
            </summary>
            <param name="id">The input team id</param>
            <returns>A list of support messages for that team</returns>
            <example>
            GET api/SupportData/GetSupportsForTeam/2
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SupportDataController.GetSupportsForUser(System.String)">
            <summary>
            Returns a list of Support Messages for a given user.
            </summary>
            <param name="id">The input UserID (string)</param>
            <returns>A list of support messages written by that user</returns>
            <example>
            GET api/SupportData/GetSupportsForUser/abcedf-12345-ghijkl
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SupportDataController.AddSupport(varsity_w_auth.Models.Support)">
            <summary>
            Adds a new support message to the database
            </summary>
            <param name="TeamSupportMessage">The message of support</param>
            <returns>Status code of 200(ok) along with the newly inserted Support ID</returns>
            <example>
            POST api/SupportData/AddSupport
            FORM DATA: JSON support object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.SupportDataController.DeleteSupport(System.Int32)">
            <summary>
            Removes a particular Message of Support.
            </summary>
            <param name="id">The supporting message to remove</param>
            <returns>200 if successful. 404 if not successful.</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamController.#cctor">
            <summary>
            This allows us to access a pre-defined C# HttpClient 'client' variable for sending POST and GET requests to the data access layer.
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamController.GetApplicationCookie">
            <summary>
            Grabs the authentication credentials which are sent to the Controller.
            This is NOT considered a proper authentication technique for the WebAPI. It piggybacks the existing authentication set up in the template for Individual User Accounts. Considering the existing scope and complexity of the course, it works for now.
            
            Here is a descriptive article which walks through the process of setting up authorization/authentication directly.
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
            </summary>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamController.AddSupport(System.Int32,System.String)">
            <summary>
            Adds a Supporting Message to the Team. Add form in /Team/Details
            </summary>
            <param name="id">The Team ID</param>
            <param name="message">The supporting message</param>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamController.DeleteSupport(System.Int32,System.Int32)">
            <summary>
            Removes a Supporting Message from a Team.
            </summary>
            <param name="id">The Support Message ID</param>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.GetTeams">
            <summary>
            Gets a list or Teams in the database alongside a status code (200 OK).
            </summary>
            <returns>A list of Teams including their ID, name, and URL.</returns>
            <example>
            GET: api/TeamData/GetTeams
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.FindSportForTeam(System.Int32)">
            <summary>
            Finds a particular sport associated with a team.
            </summary>
            <param name="id">The Team id</param>
            <returns>Information about the sport that team plays</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.GetPlayersForTeam(System.Int32)">
            <summary>
            Gets a list of players in the database that match a particular team alongside a status code (200 OK).
            </summary>
            <param name="id">The input teamid</param>
            <returns>A list of players associated with the team</returns>
            <example>
            GET: api/TeamData/GetPlayersForTeam
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.GetSponsorsForTeam(System.Int32)">
            <summary>
            Gets a list or Sponsors in the database corresponding to a particular team alongside a status code (200 OK).
            </summary>
            <param name="id">The input teamid</param>
            <returns>A list of Sponsors including their ID, name, and URL.</returns>
            <example>
            GET: api/SponsorData/GetSponsorsForTeam/3
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.FindTeam(System.Int32)">
            <summary>
            Finds a particular Team in the database with a 200 status code. If the Team is not found, return 404.
            </summary>
            <param name="id">The Team id</param>
            <returns>Information about the Team, including Team id, bio, first and last name, and teamid</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.UpdateTeam(System.Int32,varsity_w_auth.Models.Team)">
            <summary>
            Updates a Team in the database given information about the Team.
            </summary>
            <param name="id">The Team id</param>
            <param name="Team">A Team object. Received as POST data.</param>
            <returns></returns>
            <example>
            POST: api/TeamData/UpdateTeam/5
            FORM DATA: Team JSON Object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.AddTeam(varsity_w_auth.Models.Team)">
            <summary>
            Adds a Team to the database.
            </summary>
            <param name="Team">A Team object. Sent as POST form data.</param>
            <returns>status code 200 if successful. 400 if unsuccessful</returns>
            <example>
            POST: api/TeamData/AddTeam
             FORM DATA: Team JSON Object
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.DeleteTeam(System.Int32)">
            <summary>
            Deletes a Team in the database
            </summary>
            <param name="id">The id of the Team to delete.</param>
            <returns>200 if successful. 404 if not successful.</returns>
            <example>
            POST: api/TeamData/DeleteTeam/5
            </example>
        </member>
        <member name="M:varsity_w_auth.Controllers.TeamDataController.TeamExists(System.Int32)">
            <summary>
            Finds a Team in the system. Internal use only.
            </summary>
            <param name="id">The Team id</param>
            <returns>TRUE if the Team exists, false otherwise.</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.UserDataController.FindUser(System.String)">
            <summary>
            Finds a user by their id (string)
            </summary>
            <param name="id">The input ID of the user</param>
            <returns>Status code of 200, along with base profile information about the user.</returns>
        </member>
        <member name="M:varsity_w_auth.Controllers.UserDataController.UpdateUser(varsity_w_auth.Models.ApplicationUserDto)">
            <summary>
            Updates information about a user in the database
            </summary>
            <param name="">The user information to update</param>
            <returns>Status result of 200 OK if successful</returns>
        </member>
        <member name="P:varsity_w_auth.Models.Player.TeamID">
            https://www.entityframeworktutorial.net/code-first/foreignkey-dataannotations-attribute-in-code-first.aspx
        </member>
    </members>
</doc>
